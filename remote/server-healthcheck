#!/bin/bash
PATH=/sbin:/usr/sbin:/bin:/usr/bin
PUBLICIP="$(curl -s www.whatismyip.com/automation/n09230945.asp)"

function warningmsg () { tput setaf 1; echo "WARNING: $1"; tput sgr0; }
function infomsg () { tput setaf 2; echo "INFO: $1"; tput sgr0; }
function pmsg () { tput setaf 3; echo "$1"; tput sgr0; }

function printcmdout () {
    # Usage: printcmdout COMMAND WARNINGMSG [TESTCOMMAND]
    if [[ -n $3 ]]; then
	cmdtest=$(eval "$3")
	cmdout=$(eval "$1")
    else
	cmdtest=$(eval "$1")
	cmdout="$cmdtest"
    fi
    if [[ -n $cmdtest ]]; then
	warningmsg "$2..."
	echo "$cmdout" | head -n10
	nlines=$( echo "$cmdout"|sed -n '$=' )
	if [[ $nlines -gt 10 ]]; then
	    pmsg "[...]"
	    pmsg "Only showing first 10 of $nlines lines."
	    pmsg "To see the full output, run \"$1\"."
	fi
    fi
}

function printiptables () {
    printcmdout "$1" "$2" "$1|sed -e '/^target/d' -e '/Chain/d' -e '/^$/d'"
}

# Make sure script is being run as root.
if [[ $( whoami ) != "root" ]]; then
    pmsg "server-healthcheck should be run as root."
    exit 1
fi

# Make sure system is GNU/Linux
if [[ -z "$( uname -o|grep "GNU/Linux" )" ]]; then
    pmsg "You don't appear to be running GNU/Linux.  This script is for GNU/Linux."
    exit 1
fi

# Check OS version
if [[ ! -e /etc/issue ]]; then
    echo "Server doesn't have an /etc/issue file.  That's weird."
else
    if [[ -n $(grep "Red Hat Enterprise Linux ES release 3" /etc/issue) ]]; then
	infomsg "Server is running RHEL3."
    elif [[ -n $(grep "Red Hat Enterprise Linux ES release 4" /etc/issue) ]]; then
	infomsg "Server is running RHEL4."
    elif [[ -n $(grep "Red Hat Enterprise Linux Server release 5" /etc/issue) ]]; then
	infomsg "Server is running RHEL5."
    elif [[ -n $(grep "Debian GNU/Linux" /etc/issue) ]]; then
	infomsg "Server is running Debian."
    else
	infomsg "Server isn't running RHEL{3,4,5} or Debian.  From /etc/issue..."
	head -n1 /etc/issue
    fi
fi

if [[ -z $( which rpm ) ]]; then
    pmsg "This script requires the rpm command to report on installed packages.  Please install rpm."
else
    # Check for Plesk
    if [[ ! "$( rpm -q psa )" == "package psa is not installed" ]]; then
	infomsg "This server is running Plesk $(awk '{print $1}' /usr/local/psa/version)."
	infomsg "Plesk URL: https://$PUBLICIP:8443/"
	infomsg "Plesk admin password: $(cat /etc/psa/.psa.shadow)"
    else
	infomsg "Public IP: $PUBLICIP"
    fi

    # Check for Webmin
    if [[ ! "$( rpm -q webmin )" == "package webmin is not installed" ]]; then
	webminport=$(netstat -ltnp|grep "$(ps ax|grep miniserv.pl|grep -v grep|awk '{print $1}')"|awk '{print $4}'|sed 's/.*:\(.*\)$/\1/')
	if [[ -n "$webminport" ]]; then
	    infomsg "Webmin is installed and running."
	    infomsg "Webmin URL: https://$PUBLICIP:$webminport/"
	    infomsg "Primary Webmin user: $(head -n1 /etc/webmin/miniserv.users | cut -d: -f1)"
	fi
    fi

    # Check for rs-sysmon
    if [[ ! "$( rpm -q rs-sysmon )" == "package rs-sysmon is not installed" ]]; then
	infomsg "rs-sysmon is installed."
    fi
fi

# Check system time
timeoffset=$(ntpdate -q pool.ntp.org|head -n1|awk '{print $6}'|sed 's/-\?\(.*\)\..*/\1/')
[[ $timeoffset -gt 300 ]] && warningmsg "Server time is over 5 minutes off."

# Check for interesting syslog messages
msgssize=$(stat -c%s "/var/log/messages")
if [[ $msgssize -lt 1073741824 ]]; then
    printcmdout 'grep "$(date "+%b %d")" /var/log/messages|egrep "error|Error|Out of Memory|segfault|DriveReady SeekComplete"' "The following was logged today in /var/log/messages"
else
    pmsg "Skipping /var/log/messages check, file larger than 1 GB."
fi

# Check for a running iptables firewall
printiptables "iptables -nL" "There is an iptables firewall running"
printiptables "iptables -nL -t nat" "There are rules in the iptables nat table"
printiptables "iptables -nL -t mangle" "There are rules in the iptables mangle table"

# Check the load average in the past hour
for i in $( sar -q|tail -n6|sed '$d'|awk '{print $5}' ); do
    if [[ ${i/\.*} -gt 5 ]]; then
	warningmsg "The load average has been above 5 in the past hour."
	sar -q | head -n3 | tail -n1 && sar -q | tail
	break
    fi
done
if [[ $(who|sed -n '$=') -gt 1 ]]; then
    warningmsg "Other users are logged in."
    who
fi

# Check if server has been swapping
if [[ -z $( which bc ) ]]; then
    pmsg "This script requires the bc command to analyze swap usage.  Please install bc."
else
    swappts=3
    swapdat=$(mktemp)
    sar -r|sed -e 's/^Average.*//' -e 's/.*RESTART.*//' -e 's/.*kbmemfree.*//' -e '/^$/d'|tail -n$swappts|awk '{ print $10 }' > $swapdat
    if [[ $(cat $swapdat|sed -n '$=') -ge 3 ]]; then
	sdsh=$(mktemp)
	curl -s http://quicksnips.org/sd.sh > $sdsh
	swapsd=$(sh $sdsh $swapdat)
	rm -f $swapdat $sdsh
	if [[ ${swapsd/\.*} -gt 5 ]]; then
	    warningmsg "Server has been actively swapping in the past half hour."
	    sar -r | head -n3 | tail -n1 && sar -r | tail
	fi
    fi
fi

# Check available memory
memavail=$( free -m|sed -n 3p|awk '{ print $4 }' )
if [[ $memavail -lt 50 ]]; then
    warningmsg "There are only $memavail MB of free memory"
fi

# Checking available disk space
dfroot=$( df -Pm|sed 1d|awk '$6 ~ /^\/$/ { print $4 }' )
if [[ $dfroot -lt 1024 ]]; then
    warningmsg "The root partition only has $dfroot MB available"
fi

# Check MySQL
if [[ ! $( mysql -e exit 2>/dev/null || echo denied ) == "denied" ]]; then
    mcused=$( mysql -Bse 'show full processlist'|sed -n '$=' )
    mctotal=$( mysql -Bse "show variables like '%max_connections%'" | awk '{ print $2 }' )
    let mcleft=$mctotal-$mcused
    if [[ $mcleft -lt 10 ]]; then
	warningmsg "MySQL connections used/total: $mcused/$mctotal"
    fi
else
    warningmsg "root can't login to mysql."
fi

# Check Apache
abin=$(netstat -ltnp|awk '$4 ~ /:80$/ { print $7 }'|cut -d / -f 2)
if [[ -z "$($abin -V 2>&1|egrep "^Server version.*Apache\/[0-9].*")" ]]; then
    warningmsg "Apache is not listening on port 80."
else
    aroot=$($abin -V|grep "HTTPD_ROOT"|sed 's/.*=\"\(.*\)\"/\1/')
    aconf=$($abin -V|grep "SERVER_CONFIG_FILE"|sed 's/.*=\"\(.*\)\"/\1/')
    amode=$($abin -l|egrep "worker.c|prefork.c"|sed 's/ *\(.*\)\.c/\1/')
    if [[ -n $aroot ]]; then
	aconfpath=$aroot/$aconf
    else
	aconfpath=$aconf
    fi
    actotal=$(sed -n "/<IfModule.*$amode/,/<\/IfModule/p" $aconfpath|grep -i "MaxClients"|sed '/^#.*/d'|awk '{print $2}')
    acused=$( pgrep $abin|sed -n '$=' )
    let acleft=$actotal-$acused
    if [[ $acleft -lt 10 ]]; then
	warningmsg "Apache MaxClients used/total: $acused/$actotal"
    fi
    aclargestkb=$(for pid in $(pgrep $abin); do printf "%d\n" "$(pmap -d $pid|awk '$3 ~ /private/ { print $4 }'|sed 's/K//')"; done | sort -nr | head -n1)
    memkbavail=$(free|sed -n 2p|awk '{ print $2 }')
    let amaxmemkb=$aclargestkb*$actotal
    let acrecommend=$memkbavail/$aclargestkb
    if [[ $amaxmemkb -gt $memkbavail ]]; then
	warningmsg "Apache is configured to use $amaxmemkb kB of memory.  Only $memkbavail kB of memory are installed.  MaxClients should be lowered from $actotal to $acrecommend."
    fi
fi

exit 0
