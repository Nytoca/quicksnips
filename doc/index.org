#+TITLE: quicksnips
#+LINK: qs http://quicksnips.org/quicksnips/

* Intro
Quicksnips allows you to have access to a large number of one-liners
and makes them available for use on remote systems without having to
cut & paste.  Dmenu is the interface, which makes it easy to manage
thousands of menu items quickly, since it dynamically narrows down
results based on your keystrokes.  Dmenu cats the output of the
one-liners into xclip, then xdotool mimics the middle mouse button to
paste the output of your one-liner into the remote server without
executing it, so that you can modify it before executing.

* Obtaining quicksnips
To download the latest development version, use:

: git clone git://quicksnips.org/git/quicksnips

You can also browse the repository at:
http://quicksnips.org/quicksnips/

To browse source-highlighted versions of the snippets, visit:
http://quicksnips.org/snippets/

* Project layout
| Directory | Description                      |
|-----------+----------------------------------|
| [[qs:bin/][bin/]]      | quicksnips scripts               |
| [[qs:conf/][conf/]]     | quicksnips configuration files   |
| [[qs:doc/][doc/]]      | quicksnips documentation         |
| [[qs:snippets/][snippets/]] | Code snippets                    |
| [[qs:remote][remote/]]   | Scripts that are called remotely |

* Installation
** Requirements
- [[http://www.suckless.org/programs/dmenu.html][dmenu]]
- [[http://www.semicomplete.com/projects/xdotool/][xdotool]]
- [[http://sourceforge.net/projects/xclip][xclip]]
- [[http://git-scm.com/download][git]]

** Install quicksnips and dependencies
If you're using Debian or Ubuntu, all dependencies can be installed
with apt-get:

: apt-get install dmenu xdotool xclip git-core

For Fedora, you may have to download the packages from the project
websites.

Clone the quicksnips git repository:

: cd ~
: git clone git://quicksnips.org/git/quicksnips

Put =~/quicksnips/bin= in your =$PATH=.  For example, your =~./bashrc=
or =~/.bash_profile= file might contain:

: export PATH=$PATH:$HOME/bin:$HOME/quicksnips/bin

** Determine how you will run the quicksnips command

: Usage: ./quicksnips [-e] [-i] [-p] [-x] [-s SNIPDIR] [SNIPPET]...
: 
: Optional arguments.
:   -h  Print this help message.
:   -e  Show documentation in Emacs.
:   -i  Use Shift + Insert to paste the x-selection buffer.
:   -p  Preserve newlines and comments.
:   -s  Specify alternate snippet directory.
:   -x  Show documentation in Xdialog.

*** Displaying documentation
To display documentation in Emacs when a script is selected, use
=quicksnips -e= and put the following in your .emacs file:

: (load "~/quicksnips/conf/quicksnips-doc.el)

Alternatively, you can display documentation in Xdialog when a script
is selected using =quicksnips -x=.

** Bind the quicksnips command to a global keybinding
*** Gnome (Metacity)
Install and run gconf-editor, then create a keybinding for the
=quicksnips= command under:

: apps -> metacity -> keybinding_commands

...and bind it to a key under:

: apps -> metacity -> global keybindings

[[http://www.electricmonk.nl/log/2007/08/02/gnomemetacity-keybindings-and-other-customizations/][More detailed instructions]]

*** KDE
Use kmenuedit to create a new menu item which calls the quicksnips
script and then apply a keyboard shortcut to it.

*** Sawfish

Example sawfish configuration can be found in the
[[qs:conf/quicksnips-keys.jl][=conf/quicksnips-keys.jl=]].

To use that sawfish configuration, simply add the following to your
=~/.sawfishrc= file:

: (load-file "~/quicksnips/conf/quicksnips-keys.jl")

*** Ratpoison
Example configuration:

: bind d exec quicksnips

** Configuration for Emacs users
*** Shell-mode
Since the snippet files don't end in .sh, the following should be
added to .emacs to enable sh-mode for all buffers visiting snippets
files.

: (setq auto-mode-alist (append
: 		       '((".*quicksnips.*" . sh-mode))
: 		       auto-mode-alist))

*** Emacs-like keybindings
For examples of configuring Emacs-like keybindings for specific
snippets in Sawfish, view [[qs:conf/quicksnips-keys.jl][=quicksnips-keys.jl=]].

| Key     | Binding                       |
|---------+-------------------------------|
| M-S-s   | quicksnips                    |
| C-z     | Prefix Command                |
| C-z z   | C-z                           |
| C-z a   | Prefix Command                |
| C-z a b | quicksnips apache-buddy       |
| C-z a g | quicksnips apache-log-growers |
| C-z e   | quicksnips install-emacs      |
| C-z f   | Prefix Command                |
| C-z f b | quicksnips file-backup        |
| C-z g   | Prefix Command                |
| C-z g c | quicksnips git-commit-push    |
| C-z m   | Prefix Command                |
| C-z m m | quicksnips mysql-memory       |
| C-z o   | quicksnips server-overview    |
| C-z u   | quicksnips get-public-ip      |
| C-z s   | Prefix Command                |
| C-z s c | quicksnips sar-recent-cpu     |
| C-z s l | quicksnips sar-recent-load    |
| C-z s m | quicksnips sar-recent-memory  |

* Contributing
If you're interested in contributing to quicksnips, email
file:jason.png or file:matt.png

** Naming convention
Scripts should be named with the most general descriptor
first. Descriptors should be separated by hyphens.

** Scripting conventions
Multi-line scripts should end with "\" (backslash) so bash treats them
as the same line. This will prevent scripts from executing
automatically.

Comments should describe what the script does and give an example of
the script output (when applicable).

Scripts with arguments that are buried in the middle of the line
should use a bash function to move arguments to the end of the line.
For example:

: function dropips () { for ip in $*; do iptables -I INPUT -s $ip -j DROP; done && iptables -L }; dropips

* Feedback
Send suggestions or bug reports to file:feedback.png
